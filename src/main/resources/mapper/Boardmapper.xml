<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="spring.board.dao.MyBatis.BoardMapper">
    <insert id="insertPost" parameterType="spring.board.domain.Board">
        INSERT INTO board (title, content, user_idx, create_date, update_date)
        VALUES (#{title}, #{content}, #{userIdx}, #{createDate}, #{updateDate})
        <selectKey keyProperty="boardNo" resultType="Integer">
            SELECT LAST_INSERT_ID() AS board_no;
        </selectKey>
    </insert>

    <select id="selectPostByPostId" parameterType="Integer" resultType="spring.board.dto.board.BoardResponse">
        SELECT b.board_no, b.title, b.content, b.user_idx, u.name AS user_name, b.create_date, b.update_date
        FROM board b
            INNER JOIN user u
                ON b.user_idx = u.idx
        WHERE b.board_no = #{id}
    </select>

    <select id="selectPostsByUserId" parameterType="hashmap" resultType="spring.board.dto.board.BoardResponse">
        SELECT board_no, title, content, user_idx, name AS user_name, create_date, update_date
        FROM
            (SELECT ROW_NUMBER() OVER ( ORDER BY board_no ASC) AS row_num, board_no, title, content, user_idx, create_date, update_date
            FROM board
            WHERE user_idx = #{id}) b
                INNER JOIN user u ON b.user_idx = u.idx
        WHERE row_num BETWEEN #{startIndex} AND #{endIndex}
        ORDER BY row_num
    </select>

    <select id="getTotalCnt" resultType= "Integer">
        SELECT count(*) FROM board
    </select>

    <resultMap id="boardMap" type="spring.board.dto.board.BoardResponse">
        <result column="board_no" property="boardNo"></result>
        <result column="title" property="title"></result>
        <result column="content" property="content"></result>
        <result column="user_idx" property="userIdx"></result>
        <result column="name" property="userName"></result>
        <result column="create_date" property="createDate"></result>
        <result column="update_date" property="updateDate"></result>
<!--        <collection property="boards" column="boardNo" javaType="java.util.List" ofType="spring.board.dto.board.BoardResponse" select="selectPost"> </collection>-->
    </resultMap>

    <select id="selectPost" parameterType= "spring.board.dto.board.BoardSearchRequest" resultMap="boardMap">
        SELECT *
        FROM (SELECT ROW_NUMBER() OVER ( ORDER BY board_no ASC) AS row_num, board_no, title, content, user_idx, name, create_date, update_date
              FROM
              (SELECT board_no, title, content, user_idx, name, create_date, update_date
                FROM board b INNER JOIN user u ON b.user_idx = u.idx) r
        <trim prefix="WHERE" prefixOverrides="AND|OR">
            <if test = 'searchType == "title" and keyword != null and keyword != " "'>
                AND title LIKE CONCAT('%',#{keyword}, '%')
            </if>
            <if test = 'searchType == "content" and keyword != null and keyword != " "'>
                AND content LIKE CONCAT('%',#{keyword}, '%')
            </if>
            <if test = 'searchType == "name" and keyword != null and keyword != " "'>
                AND name LIKE CONCAT('%',#{keyword}, '%')
            </if>
        </trim>
            ) B
        WHERE row_num BETWEEN #{startIndex} AND #{endIndex}
        ORDER BY row_num
    </select>

    <update id="updatePost" parameterType="spring.board.dto.board.BoardUpdateRequest">
        UPDATE board
        SET title = #{title}, content = #{content}, update_date = #{updateTime}
        WHERE board_no = #{boardNo}
    </update>

    <delete id="deletePost" parameterType="Integer">
        DELETE FROM board WHERE board_no = #{bIdx}
    </delete>
</mapper>